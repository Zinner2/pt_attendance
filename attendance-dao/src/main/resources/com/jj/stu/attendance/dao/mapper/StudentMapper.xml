<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jj.stu.attendance.dao.mapper.StudentMapper">
    <resultMap id="BaseResultMap" type="com.jj.stu.attendance.dao.model.Student">
        <!--@mbg.generated-->
        <!--@Table s_student-->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <id column="username" jdbcType="VARCHAR" property="username"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="nick_name" jdbcType="VARCHAR" property="nickName"/>
        <result column="clazz_id" jdbcType="INTEGER" property="clazzId"/>
        <result column="sex" jdbcType="VARCHAR" property="sex"/>
        <result column="mobile" jdbcType="VARCHAR" property="mobile"/>
        <result column="create_date" jdbcType="TIMESTAMP" property="createDate"/>
        <result column="admin_id" jdbcType="INTEGER" property="adminId"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        id,
        username,
        `password`,
        nick_name,
        clazz_id,
        sex,
        mobile,
        create_date,
        admin_id
    </sql>
    <select id="selectByPrimaryKey" parameterType="map" resultMap="BaseResultMap">
        <!--@mbg.generated-->
        select
        <include refid="Base_Column_List"/>
        from s_student
        where id = #{id,jdbcType=INTEGER}
        and username = #{username,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="map">
        <!--@mbg.generated-->
        delete
        from s_student
        where id = #{id,jdbcType=INTEGER}
        and username = #{username,jdbcType=VARCHAR}
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.jj.stu.attendance.dao.model.Student"
            useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into s_student (username, `password`, nick_name,
        clazz_id, sex, mobile,
        create_date, admin_id)
        values (#{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{nickName,jdbcType=VARCHAR},
        #{clazzId,jdbcType=INTEGER}, #{sex,jdbcType=VARCHAR}, #{mobile,jdbcType=VARCHAR},
        #{createDate,jdbcType=TIMESTAMP}, #{adminId,jdbcType=INTEGER})
    </insert>
    <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.jj.stu.attendance.dao.model.Student"
            useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into s_student
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="username != null">
                username,
            </if>
            <if test="password != null">
                `password`,
            </if>
            <if test="nickName != null">
                nick_name,
            </if>
            <if test="clazzId != null">
                clazz_id,
            </if>
            <if test="sex != null">
                sex,
            </if>
            <if test="mobile != null">
                mobile,
            </if>
            <if test="createDate != null">
                create_date,
            </if>
            <if test="adminId != null">
                admin_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="username != null">
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="nickName != null">
                #{nickName,jdbcType=VARCHAR},
            </if>
            <if test="clazzId != null">
                #{clazzId,jdbcType=INTEGER},
            </if>
            <if test="sex != null">
                #{sex,jdbcType=VARCHAR},
            </if>
            <if test="mobile != null">
                #{mobile,jdbcType=VARCHAR},
            </if>
            <if test="createDate != null">
                #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="adminId != null">
                #{adminId,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.jj.stu.attendance.dao.model.Student">
        <!--@mbg.generated-->
        update s_student
        <set>
            <if test="password != null">
                `password` = #{password,jdbcType=VARCHAR},
            </if>
            <if test="nickName != null">
                nick_name = #{nickName,jdbcType=VARCHAR},
            </if>
            <if test="clazzId != null">
                clazz_id = #{clazzId,jdbcType=INTEGER},
            </if>
            <if test="sex != null">
                sex = #{sex,jdbcType=VARCHAR},
            </if>
            <if test="mobile != null">
                mobile = #{mobile,jdbcType=VARCHAR},
            </if>
            <if test="createDate != null">
                create_date = #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="adminId != null">
                admin_id = #{adminId,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
        and username = #{username,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.jj.stu.attendance.dao.model.Student">
        <!--@mbg.generated-->
        update s_student
        set `password` = #{password,jdbcType=VARCHAR},
        nick_name = #{nickName,jdbcType=VARCHAR},
        clazz_id = #{clazzId,jdbcType=INTEGER},
        sex = #{sex,jdbcType=VARCHAR},
        mobile = #{mobile,jdbcType=VARCHAR},
        create_date = #{createDate,jdbcType=TIMESTAMP},
        admin_id = #{adminId,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
        and username = #{username,jdbcType=VARCHAR}
    </update>

    <select id="selectByAdminId" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List">
        </include>
        FROM s_student
        <where>
            <if test="adminIds != null and adminIds.size() != 0">
                AND admin_id in
                <foreach collection="adminIds" item="adminId" separator="," open="(" close=")">
                    #{adminId}
                </foreach>
            </if>
        </where>
    </select>
</mapper>